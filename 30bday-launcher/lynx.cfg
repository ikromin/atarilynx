#******************************************************************************
# Atari Gamer's Atari Lynx 30th Birthday Competition ROM Launcher
#
# Copyright (C) 2019 Igor Kromin
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <https://www.gnu.org/licenses/>.
#******************************************************************************

SYMBOLS {
    __STACKSIZE__:        type = weak, value = $0100; # 256b stack
    __STARTOFDIRECTORY__: type = weak, value = $00CB; # start just after loader
    __BANK0BLOCKSIZE__:   type = weak, value = $0400; # bank 0 cart block size
    __BANK1BLOCKSIZE__:   type = weak, value = $0000; # bank 1 block size
    __EXEHDRUSR__:        type = import;
    __BOOTLDR__:          type = import;
    __DEFDIR__:           type = import;
}
MEMORY {
    ZP:     file = "", define = yes, start = $0000, size = $0100;
    HEADER: file = %O,               start = $0000, size = $0040;
    BOOT:   file = %O,               start = $0200, size = __STARTOFDIRECTORY__;
    DIR:    file = %O,               start = $0000, size = 8;
    MAIN:   file = %O, define = yes, start = $0200, size = $BE38 - __STACKSIZE__;
}
SEGMENTS {
    ZEROPAGE:  load = ZP,     type = zp;
    ENGZP:     load = ZP,     type = zp; # used for game engine function pointers and state info
    EXTZP:     load = ZP,     type = zp,                optional = yes;
    EXEHDRUSR: load = HEADER, type = ro;
    BOOTLDR:   load = BOOT,   type = ro;
    DIRECTORY: load = DIR,    type = ro;
    STARTUP:   load = MAIN,   type = ro,  define = yes;
    LOWCODE:   load = MAIN,   type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,   type = ro,  define = yes, optional = yes;
    CODE:      load = MAIN,   type = ro,  define = yes;
    RODATA:    load = MAIN,   type = ro,  define = yes;
    DATA:      load = MAIN,   type = rw,  define = yes;
    BSS:       load = MAIN,   type = bss, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
